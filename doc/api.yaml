openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ""
      tags:
        - App
  /user:
    post:
      operationId: UserController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: 'Created record'
        '400':
          description: 'Request body does not contain required fields'
      summary: 'create a new user'
      tags:
        - User
    get:
      operationId: UserController_findAll
      parameters: []
      responses:
        '200':
          description: 'all users records'
      summary: 'get users list'
      tags:
        - User
  '/user/{id}':
    get:
      operationId: UserController_findOne
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'record with id exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'get user by id'
      tags:
        - User
    put:
      operationId: UserController_update
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: 'Updated record'
        '400':
          description: 'Id is invalid'
        '403':
          description: 'oldPassword is wrong'
        '404':
          description: 'Id doesn''t exist'
      summary: 'change user''s fields'
      tags:
        - User
    delete:
      operationId: UserController_remove
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: 'The record is found and deleted'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'delete user by id'
      tags:
        - User
  /artist:
    post:
      operationId: ArtistController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: 'Created record'
        '400':
          description: 'Request body does not contain required fields'
      summary: 'create a new artist'
      tags:
        - Artist
    get:
      operationId: ArtistController_findAll
      parameters: []
      responses:
        '200':
          description: 'all artists records'
      summary: 'get artists list'
      tags:
        - Artist
  '/artist/{id}':
    get:
      operationId: ArtistController_findOne
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'record with id exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'get artist by id'
      tags:
        - Artist
    put:
      operationId: ArtistController_update
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: 'Updated record'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'change artist''s fields'
      tags:
        - Artist
    delete:
      operationId: ArtistController_remove
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: 'The record is found and deleted'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'delete artist by id'
      tags:
        - Artist
  /track:
    post:
      operationId: TrackController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: 'Created record'
        '400':
          description: 'Request body does not contain required fields'
      summary: 'create a new track'
      tags:
        - Track
    get:
      operationId: TrackController_findAll
      parameters: []
      responses:
        '200':
          description: 'all tracks records'
      summary: 'get tracks list'
      tags:
        - Track
  '/track/{id}':
    get:
      operationId: TrackController_findOne
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'record with id exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'get track by id'
      tags:
        - Track
    put:
      operationId: TrackController_update
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: 'Updated record'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'change track''s fields'
      tags:
        - Track
    delete:
      operationId: TrackController_remove
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: 'The record is found and deleted'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'delete track by id'
      tags:
        - Track
  /album:
    post:
      operationId: AlbumController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: 'Created record'
        '400':
          description: 'Request body does not contain required fields'
      summary: 'create a new album'
      tags:
        - Album
    get:
      operationId: AlbumController_findAll
      parameters: []
      responses:
        '200':
          description: 'all albums records'
      summary: 'get albums list'
      tags:
        - Album
  '/album/{id}':
    get:
      operationId: AlbumController_findOne
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: 'record with id exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'get album by id'
      tags:
        - Album
    put:
      operationId: AlbumController_update
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: 'Updated record'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'change album''s fields'
      tags:
        - Album
    delete:
      operationId: AlbumController_remove
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: 'The record is found and deleted'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'delete album by id'
      tags:
        - Album
  /favs:
    get:
      operationId: FavoriteController_findFirst
      parameters: []
      responses:
        '200':
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'get favorite'
      tags:
        - Favorite
  '/favs/album/{id}':
    post:
      operationId: FavoriteController_addAlbum
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: 'Created record'
        '400':
          description: 'Request body does not contain required fields'
        '422':
          description: 'id doesn''t exist'
      summary: 'add album by id to favorite'
      tags:
        - Favorite
    delete:
      operationId: FavoriteController_removeAlbum
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: 'The record is found and deleted'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'delete album by id from favorite'
      tags:
        - Favorite
  '/favs/artist/{id}':
    post:
      operationId: FavoriteController_addArtist
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: 'Created record'
        '400':
          description: 'Request body does not contain required fields'
        '422':
          description: 'id doesn''t exist'
      summary: 'add artist by id to favorite'
      tags:
        - Favorite
    delete:
      operationId: FavoriteController_removeArtist
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: 'The record is found and deleted'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'delete artist by id from favorite'
      tags:
        - Favorite
  '/favs/track/{id}':
    post:
      operationId: FavoriteController_addTrack
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: 'Created record'
        '400':
          description: 'Request body does not contain required fields'
        '422':
          description: 'id doesn''t exist'
      summary: 'add track by id to favorite'
      tags:
        - Favorite
    delete:
      operationId: FavoriteController_removeTrack
      parameters:
        -
          name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: 'The record is found and deleted'
        '400':
          description: 'Id is invalid'
        '404':
          description: 'Id doesn''t exist'
      summary: 'delete track by id from favorite'
      tags:
        - Favorite
info:
  title: 'Home Library Service'
  description: 'Home music library service API'
  version: '1.0'
  contact: {}
tags: []
servers:
  -
    url: 'http://localhost:4000'
    description: null
    variables: null
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: 'User''s login'
          example: john_doe
        password:
          type: string
          description: 'User''s password'
          example: '1234'
      required:
        - login
        - password
    User:
      type: object
      properties:
        id:
          type: object
          description: 'User ID'
          example: 123e4567-e89b-12d3-a456-426614174000
        login:
          type: string
          description: 'User login'
          example: user123
        createdAt:
          type: object
          description: 'Date when the user was created'
          example: '2024-11-08T15:48:25.376Z'
        updatedAt:
          type: object
          description: 'Date when the user was last updated'
          example: '2024-11-08T15:48:25.376Z'
        version:
          type: object
          description: 'User data version'
          example: 1
      required:
        - id
        - login
        - createdAt
        - updatedAt
        - version
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: 'User''s old password'
        newPassword:
          type: string
          description: 'User''s new password'
      required:
        - oldPassword
        - newPassword
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: 'Artist''s name'
          example: '123'
        grammy:
          type: boolean
          description: 'Artist''s grammy status'
          example: true
      required:
        - name
        - grammy
    Artist:
      type: object
      properties:
        id:
          type: object
          description: 'Artist ID'
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: 'Artist name'
          example: potter
        grammy:
          type: boolean
          description: 'artist grammy status'
          example: true
      required:
        - id
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: 'Artist''s name'
          example: '123'
        grammy:
          type: boolean
          description: 'Artist''s grammy status'
          example: true
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: 'Track''s name'
          example: '123'
        duration:
          type: number
          description: 'Track''s duration'
          example: '123'
        artistId:
          type: string
          description: 'Track''s artist id'
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          nullable: true
        albumId:
          type: string
          description: 'Track''s album id'
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          nullable: true
      required:
        - name
        - duration
        - artistId
        - albumId
    Track:
      type: object
      properties:
        id:
          type: object
          description: 'Track ID'
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: 'Track name'
          example: name
        artistId:
          type: string
          description: 'Track''s artist ID'
          example: 123e4567-e89b-12d3-a456-426614174000
        albumId:
          type: string
          description: 'Track''s albumId ID'
          example: 123e4567-e89b-12d3-a456-426614174000
        duration:
          type: number
          description: 'Track''s duration'
          example: '1'
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: 'Track''s name'
          example: '123'
        duration:
          type: number
          description: 'Track''s duration'
          example: 123
        artistId:
          type: string
          description: 'Track''s artist id'
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          nullable: true
        albumId:
          type: string
          description: 'Track''s album id'
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          nullable: true
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: 'Album''s name'
          example: '123'
        year:
          type: number
          description: 'Artist''s year'
          example: '2000'
        artistId:
          type: string
          description: 'Album''s artist id'
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
      required:
        - name
        - year
        - artistId
    Album:
      type: object
      properties:
        id:
          type: object
          description: 'Album ID'
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: 'Album name'
          example: album
        year:
          type: number
          description: 'Album year'
          example: 2000
        artistId:
          type: string
          description: 'Artist ID'
          example: 123e4567-e89b-12d3-a456-426614174000
      required:
        - id
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: 'Album''s name'
          example: '123'
        year:
          type: number
          description: 'Artist''s year'
          example: '2000'
        artistId:
          type: string
          description: 'Album''s artist id'
          example: 0a35dd62-e09f-444b-a628-f4e7c6954f57
          nullable: true
    Favorite:
      type: object
      properties:
        albums:
          description: 'albums list'
          allOf:
            -
              $ref: '#/components/schemas/Album'
        tracks:
          description: 'tracks list'
          allOf:
            -
              $ref: '#/components/schemas/Track'
        artists:
          description: 'artists list'
          allOf:
            -
              $ref: '#/components/schemas/Artist'
      required:
        - albums
        - tracks
        - artists
